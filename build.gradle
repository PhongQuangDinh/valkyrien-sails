plugins {
	//id 'fabric-loom' version '1.6-SNAPSHOT'
	//id 'maven-publish'
	//id "org.jetbrains.kotlin.jvm" version "1.9.23"

	//new
	// Needed for Forge+Fabric
	id "architectury-plugin" version "3.4.146"
	id "dev.architectury.loom" version "1.3.355" apply false
	// Kotlin
	id "org.jetbrains.kotlin.jvm" version "1.9.10" apply false
	// Kotlin linter
	id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
	// Java linter
	//id "checkstyle"

	id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
	id "com.modrinth.minotaur" version "2.4.5" apply false
}

//version = project.mod_version
//group = project.maven_group

//new
String platform = String.valueOf(loader_platform).toLowerCase()
version = minecraft_version + "-" + mod_version + "-" + platform

//base {
//	archivesName = project.archives_base_name
//}

//new
architectury {
	minecraft = rootProject.minecraft_version
}

//new
subprojects {
	apply plugin: "dev.architectury.loom"
	// Apply checkstyle and ktlint to check the code style of every sub project
	apply plugin: "org.jlleitschuh.gradle.ktlint"
	//apply plugin: "checkstyle"
	apply plugin: "org.jetbrains.kotlin.jvm"

	loom {
		silentMojangMappingsLicense()
	}

	repositories {
		maven {
			name = "ParchmentMC"
			url = "https://maven.parchmentmc.org"
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		// The following line declares the mojmap mappings, you may use other mappings as well
		mappings(loom.layered {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-1.18.2:2022.09.04@zip")
		})

		implementation("org.joml:joml:1.10.4") { transitive = false }
		implementation("org.joml:joml-primitives:1.10.0") { transitive = false }
	}

//	//todo maybe remove checkstyle stuff
//	checkstyle {
//		// configure to use checkstyle v8.41
//		toolVersion "8.41"
//		// Gradle shouldn't fail builds on checkstyle errors
//		ignoreFailures = true
//		// Checkstyle config file is in .checkstyle/checkstyle.xml
//		configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
//	}

	// configure checkstyle, but different
	// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
//	tasks.withType(Checkstyle) {
//		reports {
//			// Do not output html reports
//			html.required = false
//			// Output xml reports
//			xml.required = true
//		}
//	}

	// configure ktlint
//	ktlint {
//		ignoreFailures = true
//		reporters {
//			// configure to output in checkstyle XML format
//			reporter "checkstyle"
//		}
//	}
}

//new
allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	archivesBaseName = rootProject.archives_base_name
	version = rootProject.version
	group = rootProject.maven_group

	repositories {
		mavenLocal()
		maven {
			name = 'Kotlin for Forge'
			url = 'https://thedarkcolour.github.io/KotlinForForge/'
			content { includeGroup "thedarkcolour" }
		}
		maven {
			name = "Valkyrien Skies Internal"
			url = project.vs_maven_url ?: 'https://maven.valkyrienskies.org'
			if (project.vs_maven_username && project.vs_maven_password) {
				credentials {
					username = project.vs_maven_username
					password = project.vs_maven_password
				}
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		options.release = 17
	}

	java {
		withSourcesJar()
	}
}

//old
//repositories {
//	// Add repositories to retrieve artifacts from in here.
//	// You should only use this when depending on other mods because
//	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
//	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
//	// for more information about repositories.
//	maven {
//		name = "Terraformers"
//		url = "https://maven.terraformersmc.com/"
//	}
//	repositories {
//		exclusiveContent {
//			forRepository {
//				maven {
//					name = "Modrinth"
//					url = "https://api.modrinth.com/maven"
//				}
//			}
//			filter {
//				includeGroup "maven.modrinth"
//			}
//		}
//	}
//}
//
//dependencies {
//	// To change the versions see the gradle.properties file
//	minecraft "com.mojang:minecraft:${project.minecraft_version}"
//	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
//	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
//
//	modImplementation "maven.modrinth:valkyrien-skies:1.20.1-fabric-2.3.0-beta.7"
//	modImplementation "maven.modrinth:architectury-api:9.2.14+fabric"
//	modImplementation "maven.modrinth:vlib:1.20.1-0.0.9-alpha+fabric"
//	modImplementation("com.terraformersmc:modmenu:7.2.2")
//
//	// Fabric API. This is technically optional, but you probably want it anyway.
//	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
//}
//
//processResources {
//	inputs.property "version", project.version
//
//	filesMatching("fabric.mod.json") {
//		expand "version": project.version
//	}
//}
//
//tasks.withType(JavaCompile).configureEach {
//	it.options.release = 17
//}
//
//java {
//	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//	// if it is present.
//	// If you remove this line, sources will not be generated.
//	withSourcesJar()
//
//	sourceCompatibility = JavaVersion.VERSION_17
//	targetCompatibility = JavaVersion.VERSION_17
//}
//
//jar {
//	from("LICENSE") {
//		rename { "${it}_${project.base.archivesName.get()}"}
//	}
//}
//
//// configure the maven publication
//publishing {
//	publications {
//		create("mavenJava", MavenPublication) {
//			artifactId = project.archives_base_name
//			from components.java
//		}
//	}
//
//	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//	repositories {
//		// Add repositories to publish to here.
//		// Notice: This block does NOT have the same function as the block in the top level.
//		// The repositories here will be used for publishing your artifact, not for
//		// retrieving dependencies.
//	}
//}